#!/bin/bash
source ScriptFunctions
Import GoboLinux
Import Log
Import OptionParser
Import PostInstall
Import Requirements

source GoboPath

### Options ###################################################################

scriptDescription="Install a set of GoboLinux packages, localized at /Programs, in a target directory, generally a new GoboLinux installation."
scriptCredits="Copyright (C) 2003. Released under the GNU GPL."
helpOnNoArguments=yes
scriptUsage="<profile> <destination_directory>"
scriptExample="Base /Mount/GoboLinux"
scriptNotes="This script is used on the distribution installation process, to install a single package on a GoboLinux system use InstallPackage instead."
Add_Option_Entry "s" "super-user" "Super-user's login." "gobo"

Parse_Options "$@"

### Operation #################################################################

Verify_Superuser

profile="$(Arg 1)"
dest_dir="$(Arg 2)"

[ -r "${profile}"  ] || Die "Please inform the profile file. --help for more information."
[ -d "${dest_dir}" ] || Die "The install directory \"${dest_dir}\" don't exists or isn't a directory."

Is_Entry "super-user" && superuser="`Entry super-user`" || superuser='gobo'

function lstrip() {
   echo "$1" | sed 's,/,,1'
}

function install_base() {
   Log_Normal "Creating directory "${goboSystem}
   mkdir -p ${dest_dir}/${goboSystem}

   Log_Normal "Installing directory "${goboSettings}
   mkdir -p ${dest_dir}/${goboSettings}
   cp -a ${goboSettings}/*  ${dest_dir}/${goboSettings}

   Log_Normal "Installing directory "${goboVariable}
   mkdir -p ${dest_dir}/${goboVariable}
   for path in ${goboVariable}/*
   do
      # Avoid copying /var/run, since it may contain overlayfs files
      # from the LiveCD that are pointless to have on dest_dir.
      if [ "${path}" != "${goboVariable}/run" ]
      then cp -a ${path}  ${dest_dir}/${goboVariable} 2> /dev/null
      fi
   done
   rm -rf ${dest_dir}/${goboVariable}/run
   mkdir -p ${dest_dir}/${goboVariable}/run/{cups,dbus,dhcpcd,blkid,udev}

   Log_Normal "Installing directory "${goboSystem}/Index
   cp -a ${goboSystem}/Index ${dest_dir}/${goboSystem}

   Log_Normal "Installing directory "${goboSystem}/Aliens
   cp -a ${goboSystem}/Aliens ${dest_dir}/${goboSystem}

   Log_Normal "Installing directory "${goboSystem}/Environment
   cp -a ${goboSystem}/Environment ${dest_dir}/${goboSystem}

   Log_Normal "Installing directory "${goboSystem}/Tasks
   cp -a ${goboSystem}/Tasks ${dest_dir}/${goboSystem}

   Log_Normal "Installing directory "${goboSystem}/Kernel
   mkdir -p ${dest_dir}/${goboSystem}/Kernel
   mkdir -p ${dest_dir}/${goboSystem}/Kernel/Boot
   mkdir -p ${dest_dir}/${goboSystem}/Kernel/Devices ${dest_dir}/${goboDevices}
   mkdir -p ${dest_dir}/${goboSystem}/Kernel/Objects ${dest_dir}/${goboObjects}
   mkdir -p ${dest_dir}/${goboSystem}/Kernel/Status  ${dest_dir}/${goboStatus}

   Log_Normal "Installing directory "${goboSystem}/Kernel/Boot
   cp -a ${goboPrograms}/Linux/Current/Resources/Unmanaged/${goboSystem}/Kernel/Boot/* ${dest_dir}/${goboBoot}

   Log_Normal "Installing directory "${goboMount}
   mkdir -p ${dest_dir}/${goboMount}
   mkdir -p ${dest_dir}/${goboMount}/CD-ROM
   mkdir -p ${dest_dir}/${goboMount}/Media

   Log_Normal "Installing legacy directory "/usr
   cp -a /usr ${dest_dir}/usr

   Log_Normal "Installing directory "/Data
   for path in /Data/*
   do
      if [ "${path}" != "${goboVariable}" ]
      then cp -a ${path} ${dest_dir}/Data
      fi
   done

   Log_Normal "Installing legacy links on "${dest_dir}
   cp -a /bin /etc /lib /lib64 /sbin /tmp /var /media /run ${dest_dir}
   ln -s "`lstrip ${goboBoot}`" ${dest_dir}/boot
   ln -s "`lstrip ${goboMount}`/Media" ${dest_dir}/media
   ln -s "`lstrip ${goboMount}`" ${dest_dir}/mnt
   ln -s "Data" ${dest_dir}/srv

   Log_Normal "Installing directory "${goboUsers}/${superuser}
   mkdir -p ${dest_dir}/${goboUsers}/${superuser}
   eskeldir=${goboPrograms}/EnhancedSkel/Current/Resources/Defaults/Settings/skel
   cp -a ${eskeldir}/.[a-zA-Z]* ${dest_dir}/${goboUsers}/${superuser}
   chmod 600 ${dest_dir}/${goboUsers}/${superuser}/

   cd ${eskeldir}
   for i in `find . -type f`
   do
      GrepReplace -B "/Users/testuser" "${goboUsers}/${superuser}/" "${dest_dir}/${goboUsers}/${superuser}/$i"
   done
   cd - &> /dev/null

   GrepReplace -B "prompt lode cyan" "prompt lode red" "${dest_dir}/${goboUsers}/${superuser}/.zshrc"
   cd - &> /dev/null

   mkdir -p ${dest_dir}/Data/Variable/tmp/{.ICE-unix,.X11-unix} -m a+rwxt

   Log_Normal "Creating directory "${goboPrograms}
   mkdir -p ${dest_dir}/${goboPrograms}

   Log_Normal "Creating dev nodes"
   mknod -m 600 ${dest_dir}/${goboDevices}/console c 5 1
   mknod -m 666 ${dest_dir}/${goboDevices}/null    c 1 3
}

function install_packages() {
   while read line
   do
      Log_Normal "Installing program: $line"
      if [ ! -d "${goboPrograms}/${line}" ]
      then
         Log_Error "Could not find program named \"${line}\""
         continue
      fi

      cp -a ${goboPrograms}/${line} ${dest_dir}/${goboPrograms}

      if [ -d ${goboPrograms}/${line}/Current/Resources/Defaults/Settings ]
      then
         rm -rf ${dest_dir}/${goboPrograms}/${line}/Settings &> /dev/null
         cp -a ${goboPrograms}/${line}/Current/Resources/Defaults/Settings ${dest_dir}/${goboPrograms}/${line}
      fi
   done < ${profile}
   
   # Setup env for PostInstall chroot (ldconfig, /dev, /sys, /proc)
   mount -o bind ${goboDevices} ${dest_dir}/${goboDevices}
   mount -o bind ${goboObjects} ${dest_dir}/${goboObjects}
   mount -o bind ${goboStatus}  ${dest_dir}/${goboStatus}
   chroot ${dest_dir} ldconfig
   while read line
   do
      if [ -e ${goboPrograms}/${line}/Current/Resources/PostInstall ]
      then
         Log_Normal "Processing PostInstall script for ${line}..."
         version="`readlink ${goboPrograms}/${line}/Current`"
         Run_PostInstall "${line}" "${version}" "" "" "${dest_dir}"
      fi
      if [ -e ${goboPrograms}/${line}/Current/Resources/Requirements ]
      then
         Log_Normal "Processing Requirements script for ${line}..."
         version="`readlink ${goboPrograms}/${line}/Current`"
         Run_Requirements_Wrapper "${goboPrograms}/${line}/${version}" "${dest_dir}"
      fi
   done < ${profile}
   umount ${dest_dir}/${goboStatus}
   umount ${dest_dir}/${goboObjects}
   umount ${dest_dir}/${goboDevices}
}

### Main ####################################################################

[ -d ${dest_dir}/${goboSystem} ] || install_base

install_packages

Log_Normal "Removing broken links from ${dest_dir}${goboSystem}/Index"
chroot ${dest_dir} find ${goboSystem}/Index > /tmp/Links
chroot ${dest_dir} RemoveBroken < /tmp/Links &> /dev/null
Log_Normal "Removing broken links from ${dest_dir}${goboSystem}"
chroot ${dest_dir} find ${goboSystem} > /tmp/Links
chroot ${dest_dir} RemoveBroken < /tmp/Links &> /dev/null
Log_Normal "Removing broken links from ${dest_dir}${goboSettings}"
chroot ${dest_dir} find ${goboSettings} > /tmp/Links
chroot ${dest_dir} RemoveBroken < /tmp/Links &> /dev/null
chroot ${dest_dir} rm -f /tmp/Links
chroot ${dest_dir} ldconfig
